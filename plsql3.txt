CREATE OR REPLACE PROCEDURE XYZ AS
	CURSOR C_EMP (CIN_NO NUMBER,JOB VARCHAR2) IS

	SELECT ENAME, MGR FROM EMP WHERE EMPNO = CIN_NO;

	V_DEPTNO EMP.EMPNO%TYPE:=7876;
	J EMP.JOB%TYPE:='CLERK';
	
	ENAMEE VARCHAR2(20);
	MGRR NUMBER;


BEGIN


OPEN C_EMP (V_DEPTNO,J);
FETCH C_EMP INTO ENAMEE,MGRR;

DBMS_OUTPUT.PUT_LINE(ENAMEE);
DBMS_OUTPUT.PUT_LINE(MGRR);



CLOSE C_EMP;

END;
/

================================================================


1.CREATE PROCEDURE
2.CURSOR THAT WILL FETCH DATA FROM DEPT TABLE
3.DEFINE A PARAMETERISED CURSOR THAT WILL FETCH DATA DEPARTMENT WISE AND DISPLAY THE SAME



CREATE OR REPLACE PROCEDURE XY AS 

	CURSOR C_GEN IS SELECT * FROM DEPT;

	CURSOR C_DEPT (DNN NUMBER) IS SELECT * FROM EMP WHERE DEPTNO=DNN;
	
	INFO1 C_GEN%ROWTYPE;
	INFO2 C_DEPT%ROWTYPE;
	
SAL EMP.SAL%TYPE;
BEGIN

OPEN C_GEN;

	
		LOOP

FETCH C_GEN INTO INFO1;
		
			OPEN C_DEPT(INFO1.DEPTNO);
		
				LOOP
				
				DBMS_OUTPUT.PUT_LINE(INFO2.EMPNO||CHR(9)||INFO2.ENAME||CHR(9)||INFO2.DEPTNO||CHR(9)||INFO1.LOC||CHR(9)||INFO1.DNAME);

			FETCH C_DEPT INTO INFO2;

			EXIT WHEN C_DEPT%NOTFOUND;


				END LOOP;
			CLOSE C_DEPT;


EXIT WHEN C_GEN%NOTFOUND;

		END LOOP;

CLOSE C_GEN;

		END;
/





============================================================================================================================
diff right
EXAMPLE:
1. CREATE A PROCEDURE
2.CREATE RECORD TYPE THAT WILL HOLD DETAILS LIKE EMPNO,ENAME,SAL,JOB,DNAME AND LOC
3.DEFINE A SINGLE CURSOR THAT WILL FETCH DETAILS AND FROM DEPT TABLE
4.USE THE DATA FETCHED BY SIMPLE CURSOR TO REF CURSOR TO GET DATA OF EMPLOYEES WORKING FOR SPECIFIC DEPARTMENT AND HAVING DESIGNATION AS CLERK.





DECLARE
	TYPE REFT1 IS REF CURSOR RETURN EMP%ROWTYPE;
	EDATA REFT1;
	DATAHOLD EMP%ROWTYPE;

BEGIN 
OPEN EDATA FOR SELECT * FROM EMP;

	LOOP
		FETCH EDATA INTO DATAHOLD;
		EXIT WHEN EDATA%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(DATAHOLD.EMPNO || ' ' || DATAHOLD.ENAME || ' ' || DATAHOLD.SAL);
	END LOOP;
	CLOSE EDATA;
END;
/

========================================================================================================
1. CREATE A PROCEDURE
2.CREATE RECORD TYPE THAT WILL HOLD DETAILS LIKE EMPNO,ENAME,SAL,JOB,DNAME AND LOC
3.DEFINE A SINGLE CURSOR THAT WILL FETCH DETAILS AND FROM DEPT TABLE
4.USE THE DATA FETCHED BY SIMPLE CURSOR TO REF CURSOR TO GET DATA OF EMPLOYEES WORKING FOR SPECIFIC DEPARTMENT AND HAVING DESIGNATION AS CLERK.



CREATE OR REPLACE PROCEDURE PS AS 

	CURSOR C_GEN IS SELECT * FROM DEPT;
	INFO1 C_GEN%ROWTYPE;


	TYPE REFT1  (DNN NUMBER, JOB VARCHAR2) IS REF CURSOR RETURN EMP%ROWTYPE;
	EDATA REFT1;
	DATAHOLD EMP%ROWTYPE;

	TYPE EMPREC IS RECORD (NAME VARCHAR 2(20),EMPNO INT, SALARY INT);
	TYPE REFC IS REF CURSOR RETURN EMPREC;



	
	
	
	
	
	DEPT EMP.EMPNO%TYPE:=&X;

===========
CORRECT

BEGIN 
OPEN C_GEN; 
FETCH C_GEN INTO INFO1;
OPEN EDATA (INFO1.DEPT);


OPEN EDATA FOR SELECT * FROM EMP WHERE DEPTNO=DEPT AND JOB='CLERK';
	LOOP
		FETCH EDATA INTO DATAHOLD;
		EXIT WHEN EDATA%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(DATAHOLD.EMPNO || ' ' || DATAHOLD.ENAME || ' ' || DATAHOLD.SAL);
	END LOOP;
	CLOSE EDATA;
END;
/


=========================

TO DO::


CREATE PROCEDURE SAW AS

CURSOR CUR IS SELECT * FROM DEPT;

TYPE REFT IS REF REF CURSOR RETURN EDATA;
EDATA 
DATAHOLD








===========================================================================================


EXCEPTIONS


SYSTEM: NAME AS WELL AS ERROR CODE
UNNAMED SYSTEM
USER DEFINED


DECLARE
BEGIN
DBMS_OUTPUT.PUT_LINE(6/0);

EXCEPTION
WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE NAAM(A INT) 
AS 
NAME VARCHAR2(20);
BEGIN 
	SELECT ENAME INTO NAME FROM EMP WHERE EMPNO=A;
	DBMS_OUTPUT.PUT_LINE('NAME= '||NAME);
	
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');

	WHEN TOO_MANY_ROWS THEN
		DBMS_OUTPUT.PUT_LINE('MORE THAN ONE ROW IS FOUND');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('SOME OTHER ERRORS OCCURRED');
END;



===================



USER DEFINED

1.DECLARE A VARIABLE OF EXCEPTION TYPE AND WE CAN GENERATE AN EXCEPTION BASED ON THE VIOLATION OF BUSINESS RIHGTS
RAISE---AN EXCEPTION



DECLARE 

INVALID_AGE EXCEPTION;
VID INT;

BEGIN
VID :=&UID;
IF (VID<18) THEN
RAISE INVALID_AGE;
ELSE 
DBMS_OUTPUT.PUT_LINE('AGE ENTERED IS ='||VID);
END IF;

EXCEPTION WHEN INVALID_AGE THEN
DBMS_OUTPUT.PUT_LINE('AGE SHLD BE GREATER THEN 18');
END;
/

==========================================

day 3 assignment
Exceptions

Practice 1

•	Create a table named MESSAGES (err_message VARCHAR2(250))
•	Write a PL/SQL block that accepts a salary value from a user and displays name of the employee having the salary value, on the screen. 
•	 If the salary entered returns more than one row, handle the exception with an appropriate Exception handler and insert into the MESSAGES table the message
 “ More than one employee with salary of <input salary>”
•	 If the salary entered does not return any  rows, handle the exception with an appropriate Exception handler and insert into the MESSAGES table the message
 “ No employee with salary of < input salary>”
•	 If the salary entered returns only one row, insert into the MESSAGES table the employees name 
•	 Handle any other exception with an appropriate Exception handler and insert into the MESSAGES table the message “ Some other error occurred”



 CREATE TABLE MESSAGES (err_message VARCHAR2(250));


DECLARE

S INT;
NAME VARCHAR2(20);
COIN INT;
MORE_ROWS EXCEPTION;
NO_EMP EXCEPTION;

BEGIN
S:=&S;


SELECT ENAME INTO NAME FROM EMP WHERE S=SAL;
SELECT COUNT(ROWNUM) INTO COIN FROM EMP WHERE S=SAL;
IF COIN>1 THEN 
RAISE MORE_ROWS;
INSERT INTO MESSAGES VALUES('NAME IS '||NAME);

ELSIF COIN=1 THEN
DBMS_OUTPUT.PUT_LINE('ROWNUM IS ONE');
INSERT INTO MESSAGES VALUES('EMPLOYEE NAME TO BE ENTERED'||NAME);

ELSE
RAISE NO_EMP;
INSERT INTO MESSAGES VALUES('No employee with salary of '|| S);
END IF;
			EXCEPTION 

			WHEN MORE_ROWS THEN
		DBMS_OUTPUT.PUT_LINE(' More than one employee with salary of '||S);
			WHEN NO_EMP THEN
		DBMS_OUTPUT.PUT_LINE('No employee with salary of '|| S);
			WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('SOME OTHER ERRORS OCCURRED');

END;
/

=============================================================================


day 3
Practice 4
•	Write a PL/SQL block that accepts the employee_id of two employees as two user inputs empno1 and empno2. If empno1 exists in the “employees” table, then the block increases the salary of the employee by 10%. If empno2 exists in the “employees” table then the block increases his salary by 20%. The block should raise and handle the errors if empno1 or empno2 or both do not exist, by displaying the appropriate messages. Note that if empno1 does not exist but empno2 exists then the salary of empno2 must be increased. Also when both empno1 and empno2 do not exist then the error must be handled by the block.
 
CREATE OR REPLACE PROCEDURE EEE (EMPNO1 INT,EMPNO2 INT)
AS

ONE INT;
TWO INT;

BEGIN

SELECT COUNT(EMPNO) INTO ONE FROM EMP WHERE EMPNO=EMPNO1;
SELECT COUNT(EMPNO) INTO TWO FROM EMP WHERE EMPNO=EMPNO2;

IF ((ONE=1) AND (TWO=1)) THEN

UPDATE DUMM
SET SAL=SAL*1.10
WHERE EMPNO=EMPNO1;

UPDATE DUMM
SET SAL=SAL*1.20
WHERE EMPNO=EMPNO2;

END IF;


IF (ONE=1) AND (TWO!=1) THEN

UPDATE DUMM
SET SAL=SAL*1.10
WHERE EMPNO=EMPNO1;

END IF;

IF  (ONE!=1) AND (TWO=1) THEN

UPDATE DUMM
SET SAL=SAL*1.20
WHERE EMPNO=EMPNO2;


END IF;


IF (ONE!=1) AND (TWO!=1) THEN

DBMS_OUTPUT.PUT_LINE('BOTH NOT EQUAL');

END IF;


END;
/


EXEC EEE(7876,7788);
SELECT * FROM DUMM;


===============================================================================


uma's code



CREATE OR REPLACE PROCEDURE SAW
AS

TYPE EMPDA IS RECORD(ENAM VARCHAR2(20),EN NUMBER,DNO NUMBER,DNAM VARCHAR2(20));
EDATA1 EMPDA;
TYPE REFT2 IS REF CURSOR RETURN EMPDA;
EDATA REFT2;
DATAHOLD EDATA%ROWTYPE;
`CURSOR CR IS SELECT DEPTNO FROM DEPT;
DEP DEPT.DEPTNO%TYPE;


BEGIN
OPEN CR;
LOOP
FETCH CR INTO DEP;
EXIT WHEN CR%NOTFOUND;
OPEN EDATA FOR SELECT ENAME,EMPNO,E.DEPTNO,DNAME FROM EMP E JOIN DEPT D ON D.DEPTNO=E.DEPTNO WHERE JOB='CLERK' AND D.DEPTNO=DEP;

LOOP
FETCH EDATA INTO DATAHOLD;
EXIT WHEN EDATA%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(DATAHOLD.ENAM ||' ' ||DATAHOLD.ENO||' '||DATAHOLD.DNO||' '||DATAHOLD.DNAM);
CLOSE EDATA;
END LOOP;

CLOSE CR; 
END;
/






























loops

loop statements are used when we want to get set of statements executed for several times

fix iteration loop
like 
for loop--- basically used when we know the set of stats neede to be executed
while loop and do while loop== they are used when number of times the set of statments sre not not know


DECLARE
  BEGIN 
	FOR I IN 1..5
		LOOP
	DBMS_OUTPUT.PUT_LINE(I);
		END LOOP;
END;
/



DECLARE
  BEGIN 
	FOR I IN 1..5
		LOOP
	DBMS_OUTPUT.PUT_LINE(I|| CHR(9)||CHR(9)||'='||I*I);
		END LOOP;
END;
/

CHR 9 IS TAB

DISPLAY THE TAB;E IN FOLLOWING FORMAT,AFTER ASKING HE USERTHE NUMBER
E.G

5 * 1 = 5

TILL 5 * 10=50


CREATE OR REPLACE PROCEDURE D2(A INT)
AS
ENAM VARCHAR2(20);
BEGIN
FOR I IN 1..10
		LOOP
	DBMS_OUTPUT.PUT_LINE(5|| CHR(9)|| '*' || CHR(9)|| I || '='||5*I);
		END LOOP;
	
END;
/



A INT:=&X;

==============================
DECLARE
A INT :=&X;
BEGIN

FOR I IN 1..10
		LOOP
	DBMS_OUTPUT.PUT_LINE(A || CHR(9)|| '*' || CHR(9)|| I || '='||(A*I));
		END LOOP;
	
END;
/

==========

DECLARE
A INT :=&X;
BEGIN

FOR I IN REVERSE 1..10
		LOOP
	DBMS_OUTPUT.PUT_LINE(A || CHR(9)|| '*' || CHR(9)|| I || '='||(A*I));
		END LOOP;
	
END;
/


======
DECLARE
A INT :=1;
BEGIN

WHILE A<=5
		LOOP
	DBMS_OUTPUT.PUT_LINE(A);
	A:=A+1;
		END LOOP;
	
END;
/


=====

DECLARE
A INT :=1;
BEGIN


		LOOP
	DBMS_OUTPUT.PUT_LINE(A);
	A:=A+1;
	EXIT WHEN A>5;
		END LOOP;
	
END;
/

===========


CREATE OR REPLACE PROCEDURE ABC(ID IN EMP.EMPNO%TYPE)
AS UNAME EMP.ENAME%TYPE;
BEGIN
SELECT ENAME INTO UNAME FROM EMP WHERE EMPNO=ID;
DBMS_OUTPUT.PUT_LINE('THE VALUE YOU WANT: '|| UNAME);
END;
/


==



CREATE OR REPLACE PROCEDURE ABC(ID IN EMP.EMPNO%TYPE) AS
EDATA EMP%ROWTYPE;
BEGIN
SELECT * INTO EDATA FROM EMP WHERE EMPNO=ID;
DBMS_OUTPUT.PUT_LINE('ENAME' || EDATA.ENAME);
DBMS_OUTPUT.PUT_LINE('SALARY' ||EDATA.SAL);
DBMS_OUTPUT.PUT_LINE('JOB' || EDATA.JOB);
END;
/

===============




CREATE TABLE DUMMYTABLE AS SELECT * FROM EMP;





QUESTION




CREATE A DUMMY TABLE OF EMP.
ACCEPT EMPNO AS PARAMETER OF PROCEDURE
FETCH DATA AND CHECK IF HIS JOB IS CLERK OR SALESMAN THEN 
INCREASE SALARY BY 5% ELSE INCRESE SALARY BY 7.5% AND STORE THE NEW DATA IN DUMMY TABLE.




CREATE OR REPLACE PROCEDURE XYZ(EMPNO1 IN DUMMYTABLE.EMPNO%TYPE)
AS
EDATA DUMMYTABLE%ROWTYPE;
BEGIN
SELECT * INTO EDATA FROM EMP WHERE EMPNO=EMPNO1;


IF (EDATA.JOB='CLERK' OR EDATA.JOB='SALESMAN' ) THEN

UPDATE DUMMYTABLE
SET SAL=EDATA.SAL*1.05
WHERE EMPNO1=EMPNO;

ELSE


UPDATE DUMMYTABLE
SET SAL=EDATA.SAL*1.075
WHERE EMPNO1=EMPNO;

END IF;


END;
/


=========================

CREATE OR REPLACE PROCEDURE XYZ(EMPNO1 IN DUMMYTABLE.EMPNO%TYPE)
AS
EDATA DUMMYTABLE%ROWTYPE;
BEGIN
SELECT * INTO EDATA FROM EMP WHERE EMPNO=EMPNO1;


IF (EDATA.JOB='CLERK' OR EDATA.JOB='SALESMAN' ) THEN

UPDATE DUMMYTABLE
SET SAL=EDATA.SAL*1.05
WHERE EMPNO1=EMPNO;

ELSE


UPDATE DUMMYTABLE
SET SAL=EDATA.SAL*1.075
WHERE EMPNO1=EMPNO;

END IF;


END;
/

=======================================



DECLARE
TYPE EMPREC IS RECORD(
	ID INT,
	ENAM EMP.ENAME%TYPE,
	SALARY EMP.SAL%TYPE
	);
A1 EMPREC;

ENO INT:=&I;

BEGIN 
	SELECT EMPNO,ENAME,SAL INTO A1 FROM EMP WHERE
	EMPNO=ENO;
	DBMS_OUTPUT.PUT_LINE(A1.ID||' '||A1.ENAM||' '||A1.SALARY);
	
END;
/
=======


DISPLAY THE DETAILS OF HIGHEST EARNING EMPLOYEE


DECLARE
TYPE DATATYPE1 IS RECORD(
	ID INT,
	ENAM EMP.ENAME%TYPE,
	JOBB EMP.JOB%TYPE,
	MGRR EMP.MGR%TYPE,
	HIREDATEE EMP.HIREDATE%TYPE,
	SALARY EMP.SAL%TYPE,
	COMMM EMP.COMM%TYPE,
	DEPTNOO EMP.DEPTNO%TYPE
	);

A2 DATATYPE1;



BEGIN 
	
	SELECT EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO INTO A2 FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP);
	DBMS_OUTPUT.PUT_LINE(A2.ID||' '||A2.ENAM||' '||A2.JOBB||'  '||A2.MGRR||' ' ||A2.HIREDATEE||' '||A2.SALARY||' '||A2.COMMM||' '||A2.DEPTNOO);
END;
/

=========


DECLARE
TYPE DATATYPE1 IS RECORD(
	ROWNUM INT,
	ID INT,
	ENAM EMP.ENAME%TYPE,
	JOBB EMP.JOB%TYPE,
	MGRR EMP.MGR%TYPE,
	HIREDATEE EMP.HIREDATE%TYPE,
	SALARY EMP.SAL%TYPE,
	COMMM EMP.COMM%TYPE,
	DEPTNOO EMP.DEPTNO%TYPE
	);

A2 DATATYPE1;



BEGIN 
	
	SELECT ROWNUM,EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO INTO A2 FROM EMP WHERE ROWNUM=1 ORDER BY JOB DESC;
	DBMS_OUTPUT.PUT_LINE(A2.ID||' '||A2.ENAM||' '||A2.JOBB||'  '||A2.MGRR||' ' ||A2.HIREDATEE||' '||A2.SALARY||' '||A2.COMMM||' '||A2.DEPTNOO);
END;
/


SELECT EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO INTO A2 FROM EMP WHERE ROWNUM=1 ORDER BY JOB DESC;
SELECT EMPNO,MAX(SAL) FROM EMP WHERE (SELECT * INTO A2 FROM EMP) GROUP BY EMPNO;
SELECT * INTO A2 FROM  EMP (SELECT * FROM A2 FROM EMP) WHERE ORDER BY JOB DESC
SELECT * INTO A2 FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP);
SELECT EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO INTO A2 FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP);


SELECT SAL FROM (SELECT ROWNUM R, SAL FROM (SELECT SAL FROM EMP ORDER BY SAL DESC)) WHERE R=2;
SELECT SAL FROM (SELECT ROWNUM, SAL FROM EMP ORDER BY SAL DESC ) WHERE ROWNUM=1;
SELECT ROWNUM, SAL FROM EMP WHERE ROWNUM=1 ORDER BY SAL DESC ;


===================
















DISPLAY THE DETAILS OF HIGHEST EARNING EMPLOYEE FROM BOTH TABLES




DECLARE
TYPE DATATYPE1 IS RECORD(
	
	ID INT,
	ENAM EMP.ENAME%TYPE,
	JOBB EMP.JOB%TYPE,
	MGRR EMP.MGR%TYPE,
	HIREDATEE EMP.HIREDATE%TYPE,
	SALARY EMP.SAL%TYPE,
	COMMM EMP.COMM%TYPE,
	DEPTNOO EMP.DEPTNO%TYPE,
	DEPTNOOO DEPT.DEPTNO%TYPE,
	DNAMEE DEPT.DNAME%TYPE,
	LOCC DEPT.LOC%TYPE
	);

A2 DATATYPE1;



BEGIN 
	
	SELECT * INTO A2 FROM EMP A JOIN DEPT B ON A.DEPTNO=B.DEPTNO AND SAL=(SELECT MAX(SAL) FROM EMP );
	DBMS_OUTPUT.PUT_LINE(A2.ID||' '||A2.ENAM||' '||A2.JOBB||'  '||A2.MGRR||' ' ||A2.HIREDATEE||' '||A2.SALARY||' '||A2.COMMM||' '||A2.DEPTNOO||' '||A2.DNAMEE||' '||A2.LOCC);
END;
/


SELECT * INTO A2 FROM EMP A JOIN DEPT B ON A.DEPTNO=B.DEPTNO AND SAL=(SELECT MAX(SAL) FROM EMP );
SELECT * INTO A2 FROM EMP A, DEPT B WHERE A.DEPTNO=B.DEPTNO AND SAL=(SELECT MAX(SAL) FROM EMP );


==================================


CREATE OR REPLACE PROCEDURE TR13(ID IN INT, ENAM OUT VARCHAR2)
AS
BEGIN
	SELECT ENAME INTO ENAM FROM EMP WHERE EMPNO=ID;
	END;
/



DECLARE 
A VARCHAR2(20);
BEGIN
TR13(7900,A);
DBMS_OUTPUT.PUT_LINE('ENAME= '||A);
END;
/



===================

NOT DONE
DEFINE A PROCEDURE THAT WILL RETURN JOB AND SALARY OF THE GIVEN EMPLOYEE

CREATE OR REPLACE PROCEDURE TR13(ID IN INT, ENAM OUT VARCHAR2,JOBB OUT VARCHAR2,SALL OUT INT)
AS
BEGIN
	SELECT ENAME,JOB,SAL INTO ENAM,JOBB,SALL FROM EMP WHERE EMPNO=ID;
	END;
/



DECLARE 
A VARCHAR2(20);
B INT;
C INT;
BEGIN

TR13(7900,A,B);
DBMS_OUTPUT.PUT_LINE('ENAME= '|| ID ||' JOB ='|| JOBB || 'SAL ='||SALL);
END;
/


=====================





CREATE OR REPLACE PROCEDURE FORMATPHONE
(PPHONE IN OUT VARCHAR2)
AS
BEGIN
PPHONE := '(' || SUBSTR(PPHONE,1,3) || ')' || SUBSTR(PPHONE,4,3) || '-' || SUBSTR(PPHONE,7);



END;
/



VARIABLE GPHONE VARCHAR2(25)

DECLARE
BEGIN
:GPHONE := '07922818667';
END;


EXEC FORMATPHONE (:GPHONE)
PRINT :GPHONE


===============



SELECT SAL,CASE SAL WHEN 800 THEN SAL+100
WHEN 1000 THEN SAL+200
ELSE SAL+300 END AS DATA FROM EMP;




SELECT SAL,CASE WHEN JOB='CLERK' THEN SAL+(SAL*0.5)
WHEN JOB='SALESMAN' THEN SAL+(SAL*0.7)
END "BONUS" FROM EMP;



SELECT SAL,CASE 
WHEN SAL>1000 THEN SAL*.50 
WHEN SAL>800 THEN SAL*.20y
END DATA FROM EMP;


==================================================================================


CURSOR


%FOUND --- WANT TO CHECK WHETHER DATA IS FOUND AFTER FIRING THE QUERY,
WHEN THE CURSOR TRANVERSES WHETTHER IT FINDS THE DATA IN CONTEXT DATA.

%NOTFOUND--- OPPOSITE OF FOUND




CREATE OR REPLACE PROCEDURE TR_14(ID INT)
AS 
BEGIN 
	UPDATE EMP SET SAL=SAL+100 WHERE EMPNO=ID;
	DBMS_OUTPUT.PUT_LINE('NO OF ROWS UPDATED = '||SQL%ROWCOUNT);
END;



CREATE OR REPLACE PROCEDURE TR_14(JD VARCHAR2)
AS 
BEGIN 
	UPDATE EMP SET SAL=SAL+100 WHERE JOB=JD;
	DBMS_OUTPUT.PUT_LINE('NO OF ROWS UPDATED = '||SQL%ROWCOUNT);
END;
/







================================





EXPLICIT CURSOR




CREATE OR REPLACE PROCEDURE TR_14(JD VARCHAR2)
AS 
CURSOR CR_EMP IS SELECT EMPNO,ENAME,SAL FROM EMP WHERE JOB=JD;

INFO CR_EMP%ROWTYPE;

BEGIN
	OPEN CR_EMP;
		LOOP
			FETCH CR_EMP INTO INFO;
			EXIT WHEN CR_EMP%NOTFOUND;

			DBMS_OUTPUT.PUT_LINE(INFO.EMPNO||' ' ||INFO.ENAME|| ' ' ||INFO.SAL);
			
		END LOOP;
	CLOSE CR_EMP;

END;
/



===========


WRITE A PROCEDURE TO DISPLAY THE EMPLOYEES WORKING FOR DEPARTMENT NO 20 IN FOLLOWING FORMAT

DEPTNO:
DNAME:
LOCATION:
==========================================
SR.NO	ENAME	SAL	JOB	COMM
==========================================
1	XYZ	800	CLERK	300
2	pqr	950	PRESIDENT	500


CREATE OR REPLACE PROCEDURE TR_15
AS 
CURSOR CR_EMP IS SELECT ROWNUM,A.ENAME,A.SAL,A.JOB,A.COMM,B.DNAME,B.DEPTNO,B.LOC FROM EMP A JOIN DEPT B ON A.DEPTNO=B.DEPTNO
WHERE B.DEPTNO=20;

INFO CR_EMP%ROWTYPE;
BEGIN
OPEN CR_EMP;
FETCH CR_EMP INTO INFO;

		DBMS_OUTPUT.PUT_LINE('DEPTNO:'||INFO.DEPTNO);
		DBMS_OUTPUT.PUT_LINE('DNAME:'||INFO.DNAME);
		DBMS_OUTPUT.PUT_LINE('LOCATION:'||INFO.LOC);

	DBMS_OUTPUT.PUT_LINE('================================');
	DBMS_OUTPUT.PUT_LINE('SR.NO'|| CHR(9)|| 'ENAME' || CHR(9) ||'SAL'||CHR(9)||'COMM');
	DBMS_OUTPUT.PUT_LINE('================================');

	

		LOOP
			DBMS_OUTPUT.PUT_LINE(INFO.ROWNUM||CHR(9)  ||INFO.ENAME|| CHR(9)  ||INFO.SAL|| CHR(9)||INFO.COMM);
			FETCH CR_EMP INTO INFO;
			EXIT WHEN CR_EMP%NOTFOUND;
			
			
			
		END LOOP;
	CLOSE CR_EMP;

END;
/



=============================


WRITE A PROCEDURE TO SELECT ONLY THOSE DATA FROM EMPLOYEES WHO ARE EARNING MORE 1000 AND ARE EITHER MANAGER OR CLERK AND STORE IT IN A SEPARATE TABLE AFTER INCREMENTING THEIR SALARY
CLERK 15%
MANAGER 20%

CREATE OR REPLACE PROCEDURE TR16
AS
CURSOR CR_DOM IS SELECT * FROM EMP WHERE SAL>1000 AND (JOB='MANAGER' OR JOB='CLERK');

INFO CR_DOM%ROWTYPE;

BEGIN
	OPEN CR_DOM;
	

	LOOP 
	FETCH CR_DOM INTO INFO;
	EXIT WHEN CR_DOM%NOTFOUND;
	IF (INFO.JOB='CLERK') THEN
	
	INSERT INTO DUMMY1234 VALUES(INFO.EMPNO,INFO.ENAME,INFO.JOB,INFO.MGR,INFO.HIREDATE,INFO.SAL*1.15,INFO.COMM,INFO.DEPTNO);

	ELSIF (INFO.JOB='MANAGER') THEN
	
	
	INSERT INTO DUMMY1234 VALUES(INFO.EMPNO,INFO.ENAME,INFO.JOB,INFO.MGR,INFO.HIREDATE,INFO.SAL*1.20,INFO.COMM,INFO.DEPTNO);


	END IF;
	END LOOP;
	
	CLOSE CR_DOM;

END;
/

CREATE TABLE  DUMMY1234(EMPNO INT,ENAME VARCHAR2(20),JOB VARCHAR2(20),MGR INT,HIREDATE DATE, SAL INT,COMM INT,DEPTNO INT);



***************************************************************************************************
******************************************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************************************
***************************************************************************************************